	/* Inicio PerfilLipidico */

	@Autowired
    	PerfilLipidicoService perfilLipidicoService;
	
	@RequestMapping(value = { "/eliminarPERFIL_LIPIDICO" }, method = RequestMethod.GET)
	public String eliminarPerfilLipidico(ModelMap model, @RequestParam("idExpediente") int idExpediente, @RequestParam("idPERFIL_LIPIDICO") int idPerfil) {
		model.addAttribute("user", getPrincipal());
		PerfilLipidico nuevoPerfilLipidico = perfilLipidicoService.findById(idPerfil);
		nuevoPerfilLipidico.setEstado(EstadoResultadoLaboratorio.ELIMINADO);
		perfilLipidicoService.updatePerfilLipidico(nuevoPerfilLipidico);
		ExpedienteLaboratorio expediente = expedienteService.findById(idExpediente);
		model.addAttribute("expediente", expediente);
		List<ResultadoLaboratorioVO> labs = obtenerTodosLosLaboratoriosPorIdExpediente(expediente.getId());
		model.addAttribute("labs", labs);
		model.addAttribute("message", "Laboratorio Perfil Lipido Numero: " + idPerfil + " eliminado Exitosamente...");
		return "verExpedienteLaboratorio";
	}
	
	@RequestMapping(value = { "/consultarPERFIL_LIPIDICO" }, method = RequestMethod.GET)
	public String consultarPerfilLipidico(ModelMap model, @RequestParam("idPERFIL_LIPIDICO") int idPerfil) {
		model.addAttribute("user", getPrincipal());
		PerfilLipidico perfilLipidico = perfilLipidicoService.findById(idPerfil);
		model.addAttribute("perfilLipidico", perfilLipidico);
		ExpedienteLaboratorio expediente = expedienteService.findById(perfilLipidico.getIdExpediente());
		model.addAttribute("expediente", expediente);
		model.addAttribute("soloConsulta", true);
		return "addPerfilLipidico";
	}
	
	@RequestMapping(value = { "/editarPERFIL_LIPIDICO" }, method = RequestMethod.GET)
	public String editarPerfilLipidico(ModelMap model, @RequestParam("idPERFIL_LIPIDICO") int idPerfil) {
		model.addAttribute("user", getPrincipal());
		PerfilLipidico perfilLipidico = perfilLipidicoService.findById(idPerfil);
		ExpedienteLaboratorio expediente = expedienteService.findById(perfilLipidico.getIdExpediente());
		model.addAttribute("expediente", expediente);
		model.addAttribute("perfilLipidico", perfilLipidico);
		model.addAttribute("edit", true);
		return "addPerfilLipidico";
	}
	
	@RequestMapping(value = { "/editarPERFIL_LIPIDICO" }, method = RequestMethod.POST)
	public String modificarPerfilLipidico(ModelMap model, @Valid PerfilLipidico perfilLipidico, BindingResult result) {
		
		if (result.hasErrors()) {
			return "addPerfilLipidico";
		}
		
		model.addAttribute("user", getPrincipal());
		perfilLipidicoService.updatePerfilLipidico(perfilLipidico);
		ExpedienteLaboratorio expediente = expedienteService.findById(perfilLipidico.getIdExpediente());
		model.addAttribute("expediente", expediente);
		List<ResultadoLaboratorioVO> labs = obtenerTodosLosLaboratoriosPorIdExpediente(expediente.getId());
		model.addAttribute("labs", labs);
		model.addAttribute("message", "Laboratorio Perfil Lipido Numero: " + perfilLipidico.getId() + " editado Exitosamente...");
		return "verExpedienteLaboratorio";
	}
	
	@RequestMapping(value = { "/agregarPERFIL_LIPIDICO" }, method = RequestMethod.GET)
	public String nuevoPerfilLipidico(ModelMap model, @RequestParam("idExpediente") int idExpediente) {
		model.addAttribute("user", getPrincipal());
		//model.addAttribute("laboratoristas", userService.findAllUsersByRol("LABORATORISTA"));
		ExpedienteLaboratorio expediente = expedienteService.findById(idExpediente);
		model.addAttribute("expediente", expediente);
		PerfilLipidico perfilLipidico = new PerfilLipidico();
		model.addAttribute("perfilLipidico", perfilLipidico);
		model.addAttribute("idExpediente", idExpediente);
		model.addAttribute("edit", false);
		return "addPerfilLipidico";
	}
	
	@RequestMapping(value = { "/agregarPERFIL_LIPIDICO" }, method = RequestMethod.POST)
	public String guardarPerfilLipidico(@Valid PerfilLipidico perfilLipidico, BindingResult result, 
			ModelMap model) {
		
		if (result.hasErrors()) {
			return "addPerfilLipidico";
		}
		
		perfilLipidicoService.savePerfilLipidico(perfilLipidico);
		model.addAttribute("user", getPrincipal());
		ExpedienteLaboratorio expediente = expedienteService.findById(perfilLipidico.getIdExpediente());
		model.addAttribute("expediente", expediente);
		List<ResultadoLaboratorioVO> labs = obtenerTodosLosLaboratoriosPorIdExpediente(expediente.getId());
		model.addAttribute("labs", labs);
		model.addAttribute("message", "Laboratorio Perfil Lipidico Numero: " + perfilLipidico.getId() + " creado Exitosamente...");
		return "verExpedienteLaboratorio";
	}
	
	@RequestMapping(value = { "/imprimirPERFIL_LIPIDICO" }, method = RequestMethod.GET)
	public String imprimirPerfilLipidico(HttpServletResponse response, ModelMap model, @RequestParam("idPERFIL_LIPIDICO") int idLaboratorio) throws JRException, IOException {
		model.addAttribute("user", getPrincipal());
		PerfilLipidico perfilLipidico = perfilLipidicoService.findById(idLaboratorio);
		ExpedienteLaboratorio expediente = expedienteService.findById(perfilLipidico.getIdExpediente());
		model.addAttribute("expediente", expediente);
		User quimicoBiologo = userService.findById(perfilLipidico.getIdQuimicoBiologo());
		
		List<ParametroExportacion> exportacion= new ArrayList<ParametroExportacion>();
		ParametroExportacion mpe = new ParametroExportacion();
		if(mpe.getParameters() == null){
			mpe.setParameters(new HashMap<String,Object>());
		}
		exportacion.add(mpe);
		JasperReport report = JasperCompileManager.compileReport(new ClassPathResource("jrxml/PerfilLipidico.jrxml").getInputStream());
		
		HashMap<String, Object> params = new HashMap<String,Object>();
		params.put("logoUSALUD", new ClassPathResource("jrxml/logo_usalud.png").getInputStream());
		params.put("logoUSAC", new ClassPathResource("jrxml/logo_usac.png").getInputStream());
		params.put("titulo", "Perfil Lip√≠dico".toUpperCase());
		params.put("nombrePaciente", expediente.getNombres().toUpperCase()+" "+expediente.getApellidos().toUpperCase()+" ");
		Date fecha = perfilLipidico.getFechaLaboratorio().toDate();
		params.put("fecha", new SimpleDateFormat("dd/MM/yyyy").format(fecha));
		params.put("codigoPaciente", expediente.getCarne().toString().toUpperCase()+" ");
		params.put("quimicoBiologo", quimicoBiologo.getFirstName().toUpperCase()+" "+quimicoBiologo.getLastName().toUpperCase()+" ");
		JasperPrint myJRprintReportObject = JasperFillManager.fillReport(report, params, new net.sf.jasperreports.engine.data.JRBeanCollectionDataSource(exportacion));
		
	    response.setContentType("application/x-pdf");
	    response.setHeader("Content-disposition", "inline; filename=PerfilLipidico_"+expediente.getCarne().toString()+"_"+new SimpleDateFormat("dd-MM-yyyy").format(fecha)+".pdf");

	    final OutputStream outStream = response.getOutputStream();
	    JasperExportManager.exportReportToPdfStream(myJRprintReportObject, outStream);
		
		return null;
	}
	/* Fin PerfilLipidico */
